/*
    Asset management for ToDD server

	Copyright 2016 Matt Oswalt. Use or modification of this
	source code is governed by the license provided here:
	https://github.com/Mierdin/todd/blob/master/LICENSE
*/

package main

import (
	"crypto/sha256"
	"encoding/hex"
	"net/http"
	"strings"

	"github.com/Mierdin/todd/assets"
	"github.com/Mierdin/todd/config"
)

// serveAssets is responsible for deriving embedded assets like collector files and testlets from the golang source generated by go-bindata
// These will be written to the appropriate directories, a hash (SHA256) will be generated, and these files will be served via HTTP
// This function is typically run on the ToDD server.
func serveAssets(cfg config.Config) map[string]map[string]string {

	// Initialize asset map
	assetMap := map[string]map[string]string{
		"factcollectors": hashAssets("facts/collectors"),
		"testlets":       hashAssets("testing/testlets"),
	}

	// Begin serving files to agents
	// TODO(moswalt): Handle error
	go http.ListenAndServe(":"+cfg.Assets.Port, http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		path := strings.Replace(r.URL.Path, "/factcollectors", "facts/collectors", 1)
		path = strings.Replace(path, "/testlets", "testing/testlets", 1)

		asset, err := assets.Asset(path)
		if err != nil {
			http.NotFound(w, r)
		}

		w.Write(asset)
	}))

	return assetMap
}

func hashAssets(dir string) map[string]string {
	names, _ := assets.AssetDir(dir)
	hashes := make(map[string]string, len(names))

	for _, name := range names {
		asset, _ := assets.Asset(dir + "/" + name)
		hasher := sha256.New()
		hasher.Write(asset)

		hashes[name] = hex.EncodeToString(hasher.Sum(nil))
	}

	return hashes
}

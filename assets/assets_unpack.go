// Code generated by go-bindata.
// sources:
// agent/testing/bashtestlets/http
// agent/testing/bashtestlets/iperf
// agent/testing/bashtestlets/notatallping
// agent/facts/collectors/get_addresses
// agent/facts/collectors/get_hostname
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _testingBashtestletsHttp = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x97\x5f\x53\xdb\x38\x17\xc6\xef\xfd\x29\xce\x6b\xf2\x36\xa5\x03\x71\xc3\xc5\x5e\xd0\x81\x59\x1a\x42\xa1\x0d\x7f\x9a\xc0\xec\xee\x34\x9d\x8c\x63\x2b\x89\xa7\x8e\xe4\xb5\xe4\xb0\x2c\xf0\xdd\xf7\x48\xb2\x65\xc9\xa1\x21\xb3\xbb\x37\x6b\x1d\xff\xce\x63\xe9\xe8\x9c\x27\x74\xe7\x7f\x41\xc1\xf3\x60\x9a\xd0\x80\xd0\x15\x4c\x43\xbe\xf0\xbc\x1d\xe8\xb1\xec\x21\x4f\xe6\x0b\x01\x07\xef\xbb\xbf\xc0\x65\x28\x04\x5c\xf3\xfb\x30\x15\x1d\xb8\xe3\x04\x58\x0e\x4b\x16\x27\xb3\x24\x0a\x45\xc2\x28\xb0\x19\x88\x45\xc2\x31\x93\xb3\x22\x8f\x08\x44\x2c\x26\x90\x70\x98\xb3\x15\xc9\x29\x89\x61\xfa\x80\x04\x81\x34\x89\x08\x45\x81\x2c\x67\xab\x24\xc6\xf8\x82\xe4\xe4\x10\xf3\x16\x42\x64\xfc\x30\x08\xe6\x89\x58\x14\xd3\x4e\xc4\x96\xc1\x65\x42\xf2\x18\x37\x26\x58\x1c\x07\xd3\x94\x4d\x83\x65\xc8\x05\xc9\x83\xc1\x45\xaf\x7f\x35\xea\x7b\x5e\xb4\x20\xd1\x8f\xb7\xbb\xf0\xe8\x01\xfe\x47\xa2\x05\x03\x7f\x58\x50\x9a\xd0\x39\x24\x14\xd4\x6b\xb9\x51\xe2\x2b\x00\x45\x97\x21\x8d\x61\x7f\x05\x51\x91\xa7\x70\x1c\xc4\x64\x15\xd0\x22\x4d\xe1\xe0\xf8\x4d\x17\x9e\x9e\xe0\x51\xab\x1c\xbf\x39\x00\x5f\x31\x78\x06\xca\x04\xaa\x71\x11\xa6\x29\x89\x3b\xd0\xff\x2b\x11\xf8\x81\x8e\xff\x01\x08\x3e\x42\xf7\x03\x3c\x5b\xdf\xef\x99\x8f\xc2\xcd\xc9\x68\xd4\x3f\xd5\xdf\x56\xe8\x7b\xef\xd9\xf3\x92\x19\x7c\xfb\x06\xad\x2e\x1c\x1d\xe1\x37\x24\xed\xc3\xf7\xef\x1f\x90\xc2\x02\x51\xbd\x51\x19\xf5\x66\x89\xbc\x8a\x5b\xac\xda\x2c\xc9\xb9\x80\x30\x9f\x17\x4b\x42\xf1\x61\x86\x55\x50\xe5\x14\x84\x8b\x94\x08\xa0\xe1\x92\xc0\x7d\x82\x07\x39\x19\xfc\x76\xf2\xc7\x08\xa6\x44\xbf\xc7\x1c\x82\x77\x36\x62\x7b\xf2\x8b\x78\x98\x30\xbd\x0f\x1f\xb8\xf5\x72\x0f\x64\x49\xf0\x6c\x46\x9f\xc3\x2c\x67\x4b\x68\x1d\xa8\x37\x45\x06\x7c\xc1\x8a\x34\x96\x9a\x59\xc8\x39\x5e\x5a\x42\x05\x53\x12\x61\x96\x55\x55\xf5\xf0\x79\x82\x12\xfc\xc8\x6f\xfd\xea\xd7\xab\xd6\x63\xf5\xb8\xd3\x7a\x0f\xcf\xb0\x03\x43\xb2\xc4\xae\x80\x5b\x6b\xef\x2f\xe3\x5d\x07\x57\xbb\xc5\x82\x84\x42\xf5\x1a\x64\x0c\xb7\xb1\x07\x15\x6e\xed\x52\x1e\x46\x2c\x42\xd1\xe6\x90\x92\x99\xf0\x3c\x56\x88\xac\x10\x47\xad\xb7\xea\x4a\xf7\x39\xec\x33\xa8\xef\x7e\xff\x1e\xc6\xaa\xec\xed\xb1\x2e\xff\x98\x9e\xdf\xde\xde\xe0\x10\xc4\xe4\x10\xfe\xff\x28\x5b\x73\x22\x1b\xfa\x19\x26\xfd\xab\xd3\x13\x43\x0d\x18\xfb\x81\xe5\x11\xc9\x52\x71\xf2\xff\x13\x79\x9a\x54\xc5\x35\xfd\xd1\xd0\x3d\x46\x29\x89\x84\x8b\x47\x3a\xa8\xd9\x9e\x61\x6f\x72\xf2\xfb\x4c\xde\xb1\xcd\x66\x39\x11\x79\x48\x39\xbe\xd0\xfc\xa9\xe1\x47\x78\x97\x62\x3d\x83\xcb\xb0\x9b\xd3\x37\x39\xb7\x0c\x3b\xda\xe5\x85\x0c\x69\xee\xcc\xde\xb7\x90\x5d\x27\x1e\x32\x45\x46\x7a\x3d\x91\x6b\xcd\x7e\x6a\xd6\x4d\x9d\xc9\x2a\x9d\x75\xc6\x73\xc3\x5e\x15\xcb\x29\x6e\x18\xad\xa3\x4c\x40\x23\xe1\x32\x89\x16\xcb\x2a\x87\xeb\xa4\x8b\x17\x92\x86\x24\x4e\xf2\x46\x56\x5e\xc6\xca\xb4\xcf\x75\x7d\x92\xbf\x89\x4c\x8a\xd9\x3d\x4d\x59\x18\xcb\x04\x8e\xb1\x49\x15\xd0\x09\x5f\xd6\x12\x16\x24\x8c\x49\xce\x0d\xaf\xd7\x9a\x1e\xac\xd1\x39\xf9\xb3\xc0\xae\x36\x74\xb9\xd6\xf8\xe5\x1a\x5e\x64\xce\x5e\xf4\x52\xc3\x57\x06\x3e\x59\xcd\xe1\xb4\xdc\x25\x8c\x32\x42\x74\x82\x7c\x68\xec\xfe\xda\xc9\xb9\xcb\x5e\xca\xb0\xbf\x71\x63\xf8\xaa\x96\x6e\x37\x54\xd5\xd4\xf4\xd7\xba\x71\xf0\x25\xa0\x01\xa8\xee\x82\xaa\xbd\x36\x35\xdd\xb0\x1e\x19\x74\x70\xb8\x1b\x0e\xe0\x8c\x08\x74\x39\xb5\x33\x9c\xc9\x09\x99\xcd\xe4\x5d\xae\xca\x8e\x1a\x99\x84\x36\xce\x66\xab\xbb\xeb\x79\x66\x0a\x71\x8c\x95\xd3\xb6\xf4\x54\xc3\x13\x48\x4b\xda\xa7\xd0\xe6\x41\xe7\x9d\x35\xb9\xe3\xb7\x9d\x77\xe3\x5d\x3d\xb3\x9d\x77\xc1\xb8\x1b\x64\xed\x5d\xaf\x31\xa5\x9b\xd5\x9c\x09\xb7\xf4\x3e\x36\xf4\xca\x76\xdd\x2c\xe6\x1a\x80\xa5\xd6\x6b\xa8\x59\x83\xbe\x59\xd1\xb5\x09\x4b\xf1\xb4\xa1\xe8\xdc\xc9\x66\xcd\xa6\x95\x58\xaa\xfd\x86\xaa\xb2\x8b\xcd\x6a\xb6\xc9\x58\x4a\x67\xb5\x92\x6d\x27\xaf\xd6\xcf\x32\x22\x4b\xed\x53\xad\x66\x1b\xce\x56\x8d\x52\x5a\x95\xa5\x76\x5e\xab\xd9\x4e\xb4\x59\xed\x27\x66\x66\xc9\x5e\xb8\xb2\xc6\xaa\xb6\xd5\x75\xfd\xce\x12\xfe\x5c\x0b\x3b\x96\xf6\xca\x35\x37\x1d\xd1\xd1\xfc\xd2\xd0\xd4\xb6\xb7\x9d\xa2\xb1\x4c\x4b\x6f\xd0\xd0\x2b\x8d\x71\x3b\x41\xe3\xaa\x96\xe0\x65\x43\x50\xfb\xda\x76\x7a\x95\xed\x5a\x72\x57\x96\x9c\xe3\xac\x9b\x15\x5f\xf2\x66\x4b\xf5\xba\xa9\xba\xcd\x2e\xd7\xbd\xdb\x52\xbc\x69\x4c\x60\xd5\x45\x9b\x25\x1b\xf6\x6e\xe9\x7d\xfd\xf7\x3e\xf1\xb3\x5f\x01\x4b\x7d\x58\xab\x3b\x1e\xff\x8a\xe7\xae\xfd\x44\x58\x92\xa3\x5a\xd2\xc3\x3f\x7e\xf1\xef\xc7\x49\x1c\x8a\xf0\xa8\xad\xff\x09\xe0\x9b\x5f\x09\xff\xd0\x6f\xb7\xcc\xaa\xed\xef\xe9\xf7\x0d\xf7\x57\x54\x23\xe6\xb2\xe5\xf8\xd7\x60\x19\x70\x29\xcb\xb1\x6b\xd2\x0a\xba\xb4\x53\xe5\x9a\x77\xc2\x6e\x86\x72\xda\x9a\x54\x4b\x43\xd8\x0e\xaa\x18\x3b\x60\x28\xdb\x19\xed\xe2\xb8\xa7\xb1\x1d\x4f\x51\x76\xc0\xa1\x8c\x81\x19\xcc\x44\x0c\xe7\xf8\x91\xe2\x9c\x88\xcb\x69\xdf\xa8\x29\xbd\x76\x99\xd2\x0a\x6a\xa8\x0c\xb8\x94\x1e\xb3\x1a\xd2\xeb\x9a\x71\x26\x5c\x63\x4e\xa8\x41\xda\x72\x56\xc0\xbd\xa1\xea\xf0\xf5\x25\x55\x91\xff\x70\xf7\xce\xd4\x28\xd8\x89\xb4\x7d\xef\xb9\xed\xe9\x51\xb2\x86\xc1\xfb\x27\x00\x00\xff\xff\x75\x36\xff\x66\xd5\x0f\x00\x00")

func testingBashtestletsHttpBytes() ([]byte, error) {
	return bindataRead(
		_testingBashtestletsHttp,
		"testing/bashtestlets/http",
	)
}

func testingBashtestletsHttp() (*asset, error) {
	bytes, err := testingBashtestletsHttpBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "testing/bashtestlets/http", size: 4053, mode: os.FileMode(493), modTime: time.Unix(1463727404, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testingBashtestletsIperf = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x54\x4d\x6f\xe3\x36\x10\xbd\xeb\x57\x4c\x19\x63\x95\x04\x8e\x15\xe7\xd0\x43\x02\x07\x4d\xd3\x1c\x02\x6c\xb6\xc1\x3a\xc5\xa2\xd8\x2c\x0c\x4a\x1a\x59\x6c\x24\x52\x20\x47\x56\x5d\xc7\xff\xbd\x43\xd1\x5f\xbb\xf0\x65\xed\x0b\xcd\x99\x79\x7c\xef\xcd\x8c\x4f\x7e\x49\x5a\x67\x93\x54\xe9\x04\xf5\x02\x52\xe9\xca\x28\x3a\x81\x7b\xd3\x2c\xad\x9a\x97\x04\x57\x97\xe3\x5f\xe1\x49\x12\xc1\x9f\xae\x93\x15\x8d\xe0\x2f\x87\x60\x2c\xd4\x26\x57\x85\xca\x24\x29\xa3\xc1\x14\x40\xa5\x72\x5c\xe9\x4c\x6b\x33\x84\xcc\xe4\x08\xca\xc1\xdc\x2c\xd0\x6a\xcc\x21\x5d\x72\x06\x42\xa5\x32\xd4\x0c\xd0\x58\xb3\x50\x39\xdf\x97\x68\xf1\x9a\xeb\x4a\xa2\xc6\x5d\x27\xc9\x5c\x51\xd9\xa6\xa3\xcc\xd4\xc9\x93\x42\x9b\x33\x31\x32\x79\x9e\xa4\x95\x49\x93\x5a\x3a\x42\x9b\x7c\x7c\xbc\x7f\xf8\x34\x7d\x88\xa2\xac\xc4\xec\xed\xf4\x0c\x56\x11\xf0\x07\xb3\xd2\x80\xf8\xdc\x6a\xad\xf4\x1c\x94\x86\x3e\xec\x89\xa2\xe8\x13\x18\xb4\x96\x3a\x87\x8b\x05\xa8\x06\x6d\x01\xb7\x49\x8e\x8b\x44\xb7\x55\x05\x57\xb7\x1f\xc6\xf0\xfe\x0e\xab\x00\x73\xfb\xe1\x0a\x44\x48\x62\x15\xda\x10\xe3\x39\x92\x55\x85\xf9\x08\x1e\xfe\x55\xc4\x4f\x8c\xc4\x0d\x20\x1f\x61\x7c\x03\xeb\x03\x06\xf7\xbb\x67\xe1\xf9\x6e\x3a\x7d\xf8\x23\xbc\xde\xa7\x5e\x46\xeb\x28\x52\x05\x7c\xfd\x0a\x83\x31\x4c\x26\x20\x7a\x92\x02\xbe\x7d\xbb\xe1\x2c\xb6\x48\x07\xaa\xfe\x36\x2a\x94\x6f\xc6\x0b\xfb\x56\x28\xeb\x08\xa4\x9d\xb7\x35\x6a\x3e\x14\xec\x43\x6f\x28\xa1\xa3\x0a\x09\xb4\xac\x11\x3a\xc5\x4a\xee\x3e\x7e\xb9\xfb\x7b\x0a\x29\x86\x38\xd7\x20\x77\x6d\x6a\x86\xfe\x45\x16\x23\xab\x4e\x2e\xdd\x41\x70\x08\xde\x14\xd6\xb6\xc3\x77\x50\x58\x53\xc3\xe0\xaa\x8f\xb4\x0d\xb8\xd2\xb4\x55\xee\x31\x1b\xe9\x1c\xb7\x4d\x69\x32\x3d\x84\x6c\x9a\xad\xaf\x11\x9f\x67\x0c\xe1\x26\x62\xf0\x9b\xd8\xff\x1a\xac\xb6\xc7\x93\xc1\x25\xac\xe1\x04\x3e\x63\xcd\x73\x01\x2f\x07\xdc\x8f\xa7\x8f\xbf\x4b\xef\xd9\xb2\x21\x92\xfa\x69\x83\xc6\x30\x8d\x21\x6c\xd3\x0f\x58\x7a\x31\x54\x4a\x8a\x1d\x54\x58\x50\x70\x91\x2b\xb6\x6e\xb5\x0e\xdd\x46\x3d\xb8\x36\x75\xa4\xa8\xf5\x83\x3c\xe4\xf9\xe5\x0a\x5f\x57\xcb\x37\xe4\x98\xc5\x1e\x08\xb8\x67\xdc\x3e\xee\xa1\x63\x77\x78\xb6\x7a\xed\xfc\xe8\x10\x3a\x04\x8b\x4d\x25\x79\xea\x39\xa3\xe3\xf9\x0d\xc1\x8c\x5a\x59\x6d\x1f\x79\x7c\x1e\x1d\x28\x3c\xed\x07\x65\xb0\x23\xfe\x0e\xde\xd3\xd8\x25\xab\xd5\xb6\x60\xbd\x4e\x62\x31\x18\x8b\x38\x89\xcf\x3c\xfd\x4f\x86\x36\x4c\x3a\x8c\x99\x54\x61\x6c\xe6\xc7\xbc\xc6\xb9\x4c\x15\xeb\xea\x37\x89\x85\xf9\x4b\x71\x51\x40\x2d\xbc\x16\x26\x97\x49\x0d\xa5\x5c\xf8\x9d\xc3\x5c\x65\x24\xd3\xca\xb7\xd1\xfa\xcc\x11\x7c\xe1\x73\xeb\xfd\xc4\x3a\xf8\x8a\x80\xdc\x73\x67\xc2\x63\x52\x2f\xb9\xbd\xba\xe0\xbd\xf5\x23\xef\x8d\xb3\xfb\xe5\xed\xc9\x77\x46\xc7\xb4\x4b\xda\x1a\xa0\x5c\x10\x6c\x5b\x3d\xdb\xcc\xc7\x64\xb3\x50\x7b\xdd\x9e\x26\x88\x28\x32\x2d\x31\x09\xf6\x65\xf0\x43\x09\x4b\xa7\xac\x99\x75\x4a\xe7\xa6\x9b\x39\xf5\x1f\xce\xea\x74\x49\xb8\xb3\x30\x54\xb2\x81\x64\x21\x7e\xd5\x31\xf8\x6f\xb0\xf3\x42\x7b\x47\x47\xe7\x2f\xf7\xcf\x10\x00\xc0\x03\x5c\xc3\xeb\xe9\xe8\xfc\xf5\x6c\x74\x9e\xbc\x8e\x93\x26\xde\x9b\x0f\x4f\xbf\x33\x34\xdf\xb3\xe5\x00\x7e\x62\xd8\x80\x8a\xff\x72\xfa\x04\xde\x7e\xc2\x7e\xf9\xc2\x98\x79\xd1\x3c\x69\x1a\x33\x74\x4e\xda\x25\xa4\xcc\xe3\x91\x7d\xd8\xc4\x1c\xb2\xa3\xbc\x24\xbe\x99\xb4\xdb\x60\xa3\xd1\x5f\x76\xc6\xbe\xc1\x3f\x2d\x5f\x78\x47\x30\xa3\x6a\x19\x91\x95\xda\x15\x68\x83\x42\xf7\x33\x12\x1d\x66\x70\x1e\x64\x05\x11\x6e\xab\xee\x2c\x4a\xd9\xc6\x4e\xe5\x54\x32\xae\x22\x37\xe3\xdc\x9f\x81\x0e\x70\x7b\x74\x8f\xb1\x07\x8f\x38\xc6\xeb\x32\xcb\x25\xc9\x49\xbc\x12\x47\x9b\x25\xae\x45\x3c\x38\x1a\x89\xc5\x10\xc4\x0f\xba\x43\xf6\xf7\x77\x7d\xde\x11\x21\x7d\xee\x91\xfb\x58\xac\xe3\x28\x48\x3c\x20\x18\xfd\x1f\x00\x00\xff\xff\x4d\x99\x39\x1a\xed\x06\x00\x00")

func testingBashtestletsIperfBytes() ([]byte, error) {
	return bindataRead(
		_testingBashtestletsIperf,
		"testing/bashtestlets/iperf",
	)
}

func testingBashtestletsIperf() (*asset, error) {
	bytes, err := testingBashtestletsIperfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "testing/bashtestlets/iperf", size: 1773, mode: os.FileMode(493), modTime: time.Unix(1463727404, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testingBashtestletsNotatallping = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x93\x4f\x4f\xdb\x4a\x14\xc5\xf7\xf3\x29\xce\x1b\xfc\x70\x82\x20\x43\xb2\x78\x0b\x50\xd0\x43\xbc\x2c\x9e\x04\x2d\x6a\x5a\x55\x15\x41\xd1\xc4\xbe\x89\x47\xd8\x33\x96\x67\x1c\x1a\x25\x7c\xf7\x5e\xdb\x05\xac\xaa\x9b\xc2\xe6\x66\xce\xb9\xbf\xfb\x2f\x39\xfa\x4b\xd5\xbe\x52\x2b\x63\x15\xd9\x2d\x56\xda\x67\x42\x1c\xe1\xc6\x95\xbb\xca\x6c\xb2\x80\xc9\xf9\xf8\x1f\xdc\xe9\x10\xf0\xd1\x3f\xeb\x3c\x8c\xf0\xc5\x13\x5c\x85\xc2\xa5\x66\x6d\x12\x1d\x8c\xb3\x70\x6b\x84\xcc\x78\xce\xf4\xae\xae\x12\x42\xe2\x52\x82\xf1\xd8\xb8\x2d\x55\x96\x52\xac\x76\xec\x20\xe4\x26\x21\xcb\x80\xb2\x72\x5b\x93\xf2\x7b\x46\x15\x5d\x70\x5e\x16\x42\xe9\x2f\x94\xda\x98\x90\xd5\xab\x51\xe2\x0a\x75\x67\xa8\x4a\xb9\xb1\xe0\xd2\x54\xad\x72\xb7\x52\x85\xf6\x81\x2a\x75\xfb\xff\xcd\xec\xc3\x7c\x26\x44\x92\x51\xf2\x34\x18\x62\x2f\xc0\x7f\x94\x64\x0e\xf2\x53\x6d\xad\xb1\x1b\x18\x8b\x56\x6e\x1a\x25\xd9\x1a\x18\x5a\x68\x9b\xe2\x6c\x8b\xb2\xb1\x5c\xa9\x94\xb6\xca\xd6\x79\x8e\xc9\xd5\xf1\x18\x87\x03\xf6\x1d\xe5\xea\x78\x02\x79\xdf\x62\x3c\xac\x0b\x4c\xf3\x41\xe7\x39\xa5\x23\xcc\xbe\x9b\xc0\xca\x48\x5e\x82\x38\xc4\xf8\x12\x2f\xbd\xfa\x37\x6f\x45\x71\x7f\x3d\x9f\xcf\xfe\xeb\x6a\xb7\xd6\x73\xf1\x22\x84\x59\xe3\xe1\x01\xd1\x18\xd3\x29\x64\xdb\xa2\xc4\xe3\xe3\x25\xbb\x78\x41\xb6\x6b\xb4\x79\x15\x6b\xd3\x9c\xe2\x33\x6f\x6d\x6d\x2a\x1f\xa0\xab\x4d\x5d\x90\xe5\x60\xcd\x5b\x68\xd7\x19\xc8\x87\x9c\x02\xac\x2e\x08\xcf\x86\x07\xb9\xbe\xfd\x7a\xfd\x6d\x8e\x15\x75\x3a\xe7\x10\xdf\x6c\xee\x4e\x9b\x8a\x3c\x8c\xce\x9f\xf5\xce\xf7\xc4\x53\x34\x2b\xe1\xd9\xde\xf8\x1e\xeb\xca\x15\x88\x26\xad\x52\x97\xf0\x99\xab\xf3\xb4\x61\x96\xda\x7b\x3e\x9a\xb1\xc1\xb5\x08\x5d\x96\xaf\x5b\x15\x1c\x2f\x19\xe1\xa7\x32\xfa\x57\xbe\x7f\x8a\xf6\xaf\xe1\x51\x74\xce\x9b\xfa\xad\x30\x66\xa1\x55\xaa\xda\x2e\x7f\x02\xa7\xb2\x3d\x52\xf4\xea\xe2\x01\xa4\x10\xae\x0e\x65\x1d\xa6\xd1\x20\xfa\xc5\x3e\x14\xa2\xd4\xc9\x13\x85\x65\xee\x3c\xd3\x07\xed\x39\xa2\xce\x8f\x03\x42\x85\x78\x61\x63\x34\xff\x07\x34\x53\x9c\x59\xc4\x5e\x8d\x4e\xb0\x18\x8c\x4e\x16\xc3\xbf\xd1\xe5\xa3\xc9\x1f\x9d\xa8\xc5\x58\x95\xf1\x50\xe8\xed\x66\x99\xeb\x40\x36\xd9\xfd\x09\x94\xbf\x59\x98\x82\xb9\xaa\xa3\x2f\x54\x13\xbf\x63\x05\x9f\x8e\x2f\xb7\x4c\x75\xd0\xd3\x78\x2f\x7b\xbd\x2f\x4b\xe2\x9f\x90\x0d\x7a\x43\xf2\x42\xc6\x51\x4f\x8a\xe5\x29\x64\xaf\xa3\x65\xe1\x5b\x4b\xef\x29\x96\x2f\xb1\xe8\xda\xec\x95\xf8\x11\x00\x00\xff\xff\x84\x27\x4a\xf0\xe8\x03\x00\x00")

func testingBashtestletsNotatallpingBytes() ([]byte, error) {
	return bindataRead(
		_testingBashtestletsNotatallping,
		"testing/bashtestlets/notatallping",
	)
}

func testingBashtestletsNotatallping() (*asset, error) {
	bytes, err := testingBashtestletsNotatallpingBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "testing/bashtestlets/notatallping", size: 1000, mode: os.FileMode(493), modTime: time.Unix(1463727404, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _factsCollectorsGet_addresses = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4c\x8f\x41\x6f\x1a\x41\x0c\x85\xef\xfb\x2b\xdc\x65\xa5\x85\xaa\xc5\x2d\x87\x1e\xb6\x42\x6a\x85\x38\x44\x0a\xc9\x21\xca\x89\xa0\x68\x76\xc7\xb0\x56\x60\xbc\x1a\x0f\x20\x44\xf8\xef\x31\x91\x80\xf8\x64\xfb\xf9\x3d\x7d\xee\x7d\xc3\xad\x46\xac\x39\x20\x85\x1d\xd4\x4e\xdb\x2c\xeb\xc1\x44\xba\x43\xe4\x55\x9b\x60\xf4\xeb\xf7\x1f\x98\xb9\x94\xe0\x51\xf7\x6e\x9d\x86\xf0\xac\x04\x12\x61\x23\x9e\x97\xdc\xb8\xc4\x12\x40\x96\x90\x5a\x56\x73\xaa\x6c\x63\x43\xd0\x88\x27\x60\x85\x95\xec\x28\x06\xf2\x50\x1f\xec\x82\x60\xcd\x0d\x05\x0b\xe8\xa2\xec\xd8\xdb\xbe\xa5\x48\x95\xf9\xda\x94\x3a\xad\x10\x57\x9c\xda\x6d\x3d\x6c\x64\x83\x33\xa6\xe8\x0d\x2c\x89\xf7\x58\xaf\xa5\xc6\x8d\xd3\x44\x11\xef\xef\x26\xd3\x87\xa7\x69\x96\xb9\x18\xdd\xe1\x55\x53\x1c\x97\xc7\xfc\xbf\xf7\x91\x54\x49\xf3\x6a\x9e\x97\x26\x5e\xe6\x71\xbf\xe8\x73\x07\xe7\x19\xde\x01\xdc\xfe\x0d\x4a\xe4\x40\x09\x8f\x5d\xe4\x90\xa0\x18\x9d\x4a\x53\xd4\x70\x4a\xc5\x17\x1c\x7e\x47\x2c\x07\x83\x2c\x5b\xda\x9f\x0c\x1c\x20\x2f\x8e\xd7\xb8\xf9\xbf\xc5\x29\xff\x0b\x5e\x32\xb0\xea\x9d\x5f\x69\x4c\xb0\x1b\xce\x3f\x57\x37\xaa\xe2\xda\x16\x5c\xe6\x3f\x8c\xca\x4b\xa0\xaf\xdc\x96\x7b\xe9\xab\xea\xa7\x71\x2c\x4e\x86\x4e\x4d\x2b\x70\x33\x7f\x04\x00\x00\xff\xff\x89\xcc\x8a\x59\xa5\x01\x00\x00")

func factsCollectorsGet_addressesBytes() ([]byte, error) {
	return bindataRead(
		_factsCollectorsGet_addresses,
		"facts/collectors/get_addresses",
	)
}

func factsCollectorsGet_addresses() (*asset, error) {
	bytes, err := factsCollectorsGet_addressesBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "facts/collectors/get_addresses", size: 421, mode: os.FileMode(493), modTime: time.Unix(1463727404, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _factsCollectorsGet_hostname = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2c\x8e\x3f\x4b\xc4\x40\x10\xc5\xfb\x7c\x8a\x31\x27\x44\x9b\x5b\xb5\xb0\x48\x7b\x1c\x28\x78\x5a\x88\x95\x58\xec\x9f\xb9\xec\x40\x76\x27\xcc\x4c\x22\x87\xf8\xdd\xdd\xc2\xf2\x3d\xde\xef\xf1\xdb\x5d\xb9\x55\xc5\x05\xaa\x0e\xeb\x06\xc1\x6b\xee\xba\x1d\x1c\x78\xb9\x08\x4d\xd9\xe0\xe1\xee\xfe\x11\x4e\xde\x0c\xde\xf4\xdb\xcf\xb6\x87\x0f\x45\x60\x81\xc2\x89\xce\x14\xbd\x11\x57\xe0\x33\x58\x26\x6d\xa4\xf2\x2a\x11\x21\x72\x42\x20\x85\x89\x37\x94\x8a\x09\xc2\xa5\x2d\x10\x66\x8a\x58\xdb\xc1\x22\xbc\x51\x6a\x7d\x46\xc1\xb1\x71\xd9\x6c\xd1\xd1\xb9\x89\x2c\xaf\x61\x1f\xb9\xb8\x13\xa1\xa4\x26\x66\x9c\x92\x0b\x33\x07\x57\xbc\x1a\x8a\x7b\x79\x3e\x1c\x5f\xdf\x8f\x5d\x87\x31\x33\x0c\x3f\xfd\x13\xab\x55\x5f\xb0\x1f\x3f\xfb\xe1\xfa\x26\xff\xc7\xdb\xa1\xff\xfa\x1d\xfe\x02\x00\x00\xff\xff\xbd\x5f\xbb\x18\xe3\x00\x00\x00")

func factsCollectorsGet_hostnameBytes() ([]byte, error) {
	return bindataRead(
		_factsCollectorsGet_hostname,
		"facts/collectors/get_hostname",
	)
}

func factsCollectorsGet_hostname() (*asset, error) {
	bytes, err := factsCollectorsGet_hostnameBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "facts/collectors/get_hostname", size: 227, mode: os.FileMode(493), modTime: time.Unix(1463727404, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"testing/bashtestlets/http": testingBashtestletsHttp,
	"testing/bashtestlets/iperf": testingBashtestletsIperf,
	"testing/bashtestlets/notatallping": testingBashtestletsNotatallping,
	"facts/collectors/get_addresses": factsCollectorsGet_addresses,
	"facts/collectors/get_hostname": factsCollectorsGet_hostname,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"facts": &bintree{nil, map[string]*bintree{
		"collectors": &bintree{nil, map[string]*bintree{
			"get_addresses": &bintree{factsCollectorsGet_addresses, map[string]*bintree{}},
			"get_hostname": &bintree{factsCollectorsGet_hostname, map[string]*bintree{}},
		}},
	}},
	"testing": &bintree{nil, map[string]*bintree{
		"bashtestlets": &bintree{nil, map[string]*bintree{
			"http": &bintree{testingBashtestletsHttp, map[string]*bintree{}},
			"iperf": &bintree{testingBashtestletsIperf, map[string]*bintree{}},
			"notatallping": &bintree{testingBashtestletsNotatallping, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

